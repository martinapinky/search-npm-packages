{"version":3,"sources":["state/action-types/index.ts","state/reducers/repositoriesReducer.ts","state/reducers/index.ts","state/store.ts","state/action-creators/index.ts","hooks/useTypedSelector.ts","components/RepositoriesList.tsx","hooks/useActions.ts","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionType","initialState","loading","error","data","reducer","state","action","type","SEARCH_REPOSITORIES","SEARCH_REPOSITORIES_SUCCESS","payload","SEARCH_REPOSITORIES_ERROR","reducers","combineReducers","repositories","repositoriesReducer","store","createStore","applyMiddleware","thunk","searchRepositories","term","dispatch","a","axios","get","params","text","objects","map","result","name","package","link","links","npm","message","useTypedSelector","useSelector","RepositoriesList","useState","setTerm","searched","setSearched","useDispatch","bindActionCreators","actionCreators","useActions","onSubmit","event","preventDefault","value","onChange","e","target","required","className","repository","href","length","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAAYA,E,gEAAAA,K,0CAAAA,E,0DAAAA,E,uDAAAA,M,KCUZ,IAAMC,EAAe,CACnBC,SAAS,EACTC,MAAO,KACPC,KAAM,IAmBOC,EAhBC,WAGS,IAFvBC,EAEsB,uDAFKL,EAC3BM,EACsB,uCACtB,OAAQA,EAAOC,MACb,KAAKR,EAAWS,oBACd,MAAO,CAAEP,SAAS,EAAMC,MAAO,KAAMC,KAAM,IAC7C,KAAKJ,EAAWU,4BACd,MAAO,CAAER,SAAS,EAAOC,MAAO,KAAMC,KAAMG,EAAOI,SACrD,KAAKX,EAAWY,0BACd,MAAO,CAAEV,SAAS,EAAOC,MAAOI,EAAOI,QAASP,KAAM,IACxD,QACE,OAAOE,ICrBEO,EAJEC,YAAgB,CAC/BC,aAAcC,ICAHC,EAAQC,YAAYL,EAAU,GAAIM,YAAgBC,M,0CCElDC,EAAqB,SAACC,GACjC,8CAAO,WAAOC,GAAP,mBAAAC,EAAA,6DACLD,EAAS,CACPf,KAAMR,EAAWS,sBAFd,kBAMoBgB,IAAMC,IAC3B,yCACA,CACEC,OAAQ,CACNC,KAAMN,KAVT,gBAMKlB,EANL,EAMKA,KASFW,EAAiCX,EAAKyB,QAAQC,KAAI,SAACC,GACvD,MAAO,CAAEC,KAAMD,EAAOE,QAAQD,KAAME,KAAMH,EAAOE,QAAQE,MAAMC,QAGjEb,EAAS,CACPf,KAAMR,EAAWU,4BACjBC,QAASI,IArBR,kDAwBHQ,EAAS,CACPf,KAAMR,EAAWY,0BACjBD,QAAS,KAAI0B,UA1BZ,0DAAP,uD,QCJWC,EAAoDC,I,OC8ClDC,EA7CoB,WACjC,MAAwBC,mBAAS,IAAjC,mBAAOnB,EAAP,KAAaoB,EAAb,KACA,EAAgCD,oBAAS,GAAzC,mBAAOE,EAAP,KAAiBC,EAAjB,KACQvB,ECHgB,WACxB,IAAME,EAAWsB,cAEjB,OAAOC,YAAmBC,EAAgBxB,GDAXyB,GAAvB3B,mBACR,EAAiCiB,GAC/B,SAAChC,GAAD,OAAWA,EAAMS,gBADXX,EAAR,EAAQA,KAAMF,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,MAWvB,OACE,gCACE,uBAAM8C,SATO,SAACC,GAChBA,EAAMC,iBAENP,GAAY,GACZvB,EAAmBC,IAKjB,UACE,uBACE8B,MAAO9B,EACP+B,SAAU,SAACC,GAAD,OAAOZ,EAAQY,EAAEC,OAAOH,QAClCI,UAAQ,IAEV,wBAAQhD,KAAK,SAAb,uBAEDL,GAAS,6BAAKA,IACdD,GAAW,4CACZ,sBAAKuD,UAAU,UAAf,WACItD,IACCD,GACDE,EAAK0B,KAAI,SAAC4B,GAAD,OACP,qBAAKD,UAAU,cAAf,SACE,mBAAGE,KAAMD,EAAWxB,KAA4BqB,OAAO,SAAvD,SACGG,EAAW1B,MADiB0B,EAAW1B,YAK9C7B,IAAUD,GAA2B,IAAhBE,EAAKwD,QAAgBjB,GAC1C,yDE3BKkB,EAXH,WACV,OACE,cAAC,IAAD,CAAU5C,MAAOA,EAAjB,SACE,sBAAKwC,UAAU,YAAf,UACE,sDACA,cAAC,EAAD,UCKOK,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.258ab865.chunk.js","sourcesContent":["export enum ActionType {\n  SEARCH_REPOSITORIES = 'search_repositories',\n  SEARCH_REPOSITORIES_SUCCESS = 'search_repositories_success',\n  SEARCH_REPOSITORIES_ERROR = 'search_repositories_error',\n}\n","import { RepositoryData } from '../../interfaces';\nimport { ActionType } from '../action-types';\nimport { Action } from '../actions';\n\ninterface RepositoriesState {\n  loading: boolean;\n  error: string | null;\n  data: RepositoryData[];\n}\n\nconst initialState = {\n  loading: false,\n  error: null,\n  data: [],\n};\n\nconst reducer = (\n  state: RepositoriesState = initialState,\n  action: Action\n): RepositoriesState => {\n  switch (action.type) {\n    case ActionType.SEARCH_REPOSITORIES:\n      return { loading: true, error: null, data: [] };\n    case ActionType.SEARCH_REPOSITORIES_SUCCESS:\n      return { loading: false, error: null, data: action.payload };\n    case ActionType.SEARCH_REPOSITORIES_ERROR:\n      return { loading: false, error: action.payload, data: [] };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport repositoriesReducer from './repositoriesReducer';\n\nconst reducers = combineReducers({\n  repositories: repositoriesReducer,\n});\n\nexport default reducers;\n\nexport type RootState = ReturnType<typeof reducers>;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducers from './reducers';\n\nexport const store = createStore(reducers, {}, applyMiddleware(thunk));\n","import axios from 'axios';\nimport { Dispatch } from 'redux';\nimport { ActionType } from '../action-types';\nimport { Action } from '../actions';\nimport { RepositoryData } from '../../interfaces';\n\nexport const searchRepositories = (term: string) => {\n  return async (dispatch: Dispatch<Action>) => {\n    dispatch({\n      type: ActionType.SEARCH_REPOSITORIES,\n    });\n\n    try {\n      const { data } = await axios.get(\n        'https://registry.npmjs.org/-/v1/search',\n        {\n          params: {\n            text: term,\n          },\n        }\n      );\n\n      const repositories: RepositoryData[] = data.objects.map((result: any) => {\n        return { name: result.package.name, link: result.package.links.npm };\n      });\n\n      dispatch({\n        type: ActionType.SEARCH_REPOSITORIES_SUCCESS,\n        payload: repositories,\n      });\n    } catch (err) {\n      dispatch({\n        type: ActionType.SEARCH_REPOSITORIES_ERROR,\n        payload: err.message,\n      });\n    }\n  };\n};\n","import { useSelector, TypedUseSelectorHook } from 'react-redux';\nimport { RootState } from '../state';\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { useState } from 'react';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport { useActions } from '../hooks/useActions';\n\nconst RepositoriesList: React.FC = () => {\n  const [term, setTerm] = useState('');\n  const [searched, setSearched] = useState(false);\n  const { searchRepositories } = useActions();\n  const { data, loading, error } = useTypedSelector(\n    (state) => state.repositories\n  );\n\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setSearched(true);\n    searchRepositories(term);\n  };\n\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <input\n          value={term}\n          onChange={(e) => setTerm(e.target.value)}\n          required\n        />\n        <button type='submit'>Search</button>\n      </form>\n      {error && <h3>{error}</h3>}\n      {loading && <h3>Loading...</h3>}\n      <div className='results'>\n        {!error &&\n          !loading &&\n          data.map((repository) => (\n            <div className='result-item'>\n              <a href={repository.link} key={repository.name} target='_blank'>\n                {repository.name}\n              </a>\n            </div>\n          ))}\n        {!error && !loading && data.length === 0 && searched && (\n          <h3>No results found</h3>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default RepositoriesList;\n","import { useDispatch } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { actionCreators } from '../state';\n\nexport const useActions = () => {\n  const dispatch = useDispatch();\n\n  return bindActionCreators(actionCreators, dispatch);\n};\n","import { Provider } from 'react-redux';\nimport { store } from '../state';\nimport RepositoriesList from './RepositoriesList';\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <div className='container'>\n        <h1>Search For a Package</h1>\n        <RepositoriesList />\n      </div>\n    </Provider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}